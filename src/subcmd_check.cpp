#include "subcmd_check.hpp"

#include "compress.hpp"
#include "decompress.hpp"
#include "fmt.hpp"

#include <cstdint>
#include <vector>

namespace fs = std::filesystem;

// The string "iamaducktrapexit" over and over for 1024 bytes
static const unsigned int uncompressed_data_len = 1024;
static const unsigned char uncompressed_data[] =
  {
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b,
    0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74, 0x69, 0x61, 0x6d, 0x61,
    0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70, 0x65, 0x78, 0x69, 0x74,
    0x69, 0x61, 0x6d, 0x61, 0x64, 0x75, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x70,
    0x65, 0x78, 0x69, 0x74
  };

// The above data compressed using original compression library in 3DO SDK
static const unsigned int compressed_data_len = 144;
static const unsigned char compressed_data[] =
  {
    0xb4, 0xd8, 0x6d, 0xb6, 0x1b, 0x25, 0xd6, 0xc7, 0x6b, 0xba, 0x5c, 0xac,
    0x37, 0x0b, 0x2d, 0xe2, 0xd3, 0x74, 0x00, 0x0f, 0x80, 0x4f, 0xc0, 0x4b,
    0xe0, 0x37, 0xf0, 0x24, 0xf8, 0x16, 0xfc, 0x0d, 0xbe, 0x07, 0xff, 0x04,
    0x8f, 0x82, 0x8f, 0xc1, 0x6b, 0xe0, 0xc7, 0xf0, 0x6c, 0xf8, 0x3a, 0xfc,
    0x1f, 0xbe, 0x10, 0xff, 0x09, 0x0f, 0x84, 0xcf, 0xc2, 0x8b, 0xe1, 0x57,
    0xf0, 0xb4, 0xf8, 0x5e, 0xfc, 0x31, 0xbe, 0x19, 0xff, 0x0d, 0x8f, 0x87,
    0x0f, 0xc3, 0xab, 0xe1, 0xe7, 0xf0, 0xfc, 0xf8, 0x82, 0xfc, 0x43, 0xbe,
    0x22, 0xff, 0x12, 0x0f, 0x89, 0x4f, 0xc4, 0xcb, 0xe2, 0x77, 0xf1, 0x44,
    0xf8, 0xa6, 0xfc, 0x55, 0xbe, 0x2b, 0xff, 0x16, 0x8f, 0x8b, 0x8f, 0xc5,
    0xeb, 0xe3, 0x07, 0xf1, 0x8c, 0xf8, 0xca, 0xfc, 0x67, 0xbe, 0x34, 0xff,
    0x1b, 0x0f, 0x8d, 0xcf, 0xc7, 0x0b, 0xe3, 0x97, 0xf1, 0xd4, 0xf8, 0xee,
    0xfc, 0x79, 0xbe, 0x3d, 0xff, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00
  };

namespace l
{
  static
  void
  write_word(void     *buf_,
             uint32_t  word_)
  {
    std::vector<uint32_t> *buf = (std::vector<uint32_t>*)buf_;

    buf->push_back(word_);
  }

  static
  void
  check_compression()
  {
    int rv;
    uint32_t *words;
    Compressor *comp;
    std::vector<uint32_t> local_compressed_data;

    rv = CreateCompressor(&comp,(CompFunc)l::write_word,NULL,(void*)&local_compressed_data);
    if(rv < 0)
      throw std::runtime_error("CreateCompressor failed");

    words = (uint32_t*)uncompressed_data;
    for(unsigned i = 0; i < (uncompressed_data_len / sizeof(uint32_t)); ++i)
      FeedCompressor(comp,&words[i],1);

    rv = DeleteCompressor(comp);

    rv = memcmp(local_compressed_data.data(),compressed_data,compressed_data_len);

    if(rv == 0)
      fmt::print("* output of 3ct compressor matches SDK\n");
    else
      fmt::print("* output of 3ct compressor does NOT match SDK");
  }

  static
  void
  check_decompression()
  {
    int rv;
    uint32_t *words;
    Decompressor *decomp;
    std::vector<uint32_t> local_uncompressed_data;

    rv = CreateDecompressor(&decomp,(CompFunc)l::write_word,NULL,(void*)&local_uncompressed_data);
    if(rv < 0)
      throw std::runtime_error("CreateCompressor failed");

    words = (uint32_t*)compressed_data;
    for(unsigned i = 0; i < (compressed_data_len / sizeof(uint32_t)); ++i)
      FeedDecompressor(decomp,&words[i],1);

    rv = DeleteDecompressor(decomp);

    rv = memcmp(local_uncompressed_data.data(),uncompressed_data,uncompressed_data_len);

    if(rv == 0)
      fmt::print("* output of 3ct decompressor matches SDK\n");
    else
      fmt::print("* output of 3ct decompressor does NOT match SDK");
  }
}

void
SubCmd::check()
{
  l::check_compression();
  l::check_decompression();
}
